{"version":3,"sources":["component/Buttons.js","component/Display.js","component/buttonData.js","component/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["buttonStyle","display","alignItems","justifyContent","Buttons","handleClick","props","name","setSecondNumber","setOperator","clearResult","id","this","style","onClick","React","Component","displayStyle","background","color","textAlign","paddingRight","Display","secondNumber","firstNumber","buttonData","data","Calculator","state","operator","setState","includes","calculate","result","parseFloat","toString","className","map","button","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6SAEMA,EAAc,CAChBC,QAAS,OACTC,WAAY,SACZC,eAAgB,UAgDLC,E,2MA3CXC,YAAc,WACV,OAAO,EAAKC,MAAMC,MACd,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACD,EAAKD,MAAME,gBAAgB,EAAKF,MAAMC,MACtC,MACJ,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACD,EAAKD,MAAMG,YAAY,EAAKH,MAAMC,MAClC,MACJ,IAAK,QACD,EAAKD,MAAMI,gB,wEAQnB,OACI,4BACIC,GAAIC,KAAKN,MAAMK,GACfE,MAAOb,EACPc,QAASF,KAAKP,aAEV,4BAAKO,KAAKN,MAAMC,W,GAvCdQ,IAAMC,WCNtBC,EAAe,CACjBC,WAAY,UACZC,MAAO,QACPC,UAAW,QACXC,aAAc,IAaHC,E,iLARP,OACI,yBAAKX,GAAG,UAAUE,MAAOI,GACrB,4BAAiC,KAA5BL,KAAKN,MAAMiB,aAAsBX,KAAKN,MAAMiB,aAAeX,KAAKN,MAAMkB,kB,GAJrET,IAAMC,WCWbS,EApBI,CACf,CAACd,GAAI,QAASJ,KAAM,SACpB,CAACI,GAAI,QAASJ,KAAM,KACpB,CAACI,GAAI,QAASJ,KAAM,KACpB,CAACI,GAAI,OAAQJ,KAAM,KACnB,CAACI,GAAI,MAAOJ,KAAM,KAClB,CAACI,GAAI,OAAQJ,KAAM,KACnB,CAACI,GAAI,OAAQJ,KAAM,KACnB,CAACI,GAAI,MAAOJ,KAAM,KAClB,CAACI,GAAI,WAAYJ,KAAM,KACvB,CAACI,GAAI,MAAOJ,KAAM,KAClB,CAACI,GAAI,MAAOJ,KAAM,KAClB,CAACI,GAAI,QAASJ,KAAM,KACpB,CAACI,GAAI,WAAYJ,KAAM,KACvB,CAACI,GAAI,OAAQJ,KAAM,KACnB,CAACI,GAAI,UAAWJ,KAAM,KACtB,CAACI,GAAI,SAAUJ,KAAM,KACrB,CAACI,GAAI,SAAUJ,KAAM,MCXrBmB,G,MAAOD,GA6GIE,E,2MA1GXC,MAAQ,CACJJ,YAAa,GACbD,aAAc,IACdM,SAAU,I,EAGdnB,YAAc,WACV,EAAKoB,SAAS,CACVN,YAAa,GACbD,aAAc,IACdM,SAAU,M,EAIlBrB,gBAAkB,SAACD,GACiB,MAA5B,EAAKqB,MAAML,cAAiC,MAAThB,EACnC,EAAKuB,SAAS,CACVP,aAAc,EAAKK,MAAML,aAAehB,IAET,MAA5B,EAAKqB,MAAML,cAAiC,MAAThB,EAC1C,EAAKuB,SAAS,CACVN,YAAa,EAAKI,MAAML,aACxBA,aAAchB,IAEF,MAATA,GAAgB,EAAKqB,MAAML,aAAaQ,SAAS,KACxD,EAAKD,SAAS,CACVP,aAAc,EAAKK,MAAML,eAG7B,EAAKO,SAAS,CACVP,aAAc,EAAKK,MAAML,aAAehB,K,EAKpDE,YAAc,SAACF,GACiB,KAAxB,EAAKqB,MAAMC,SACX,EAAKC,SAAS,CACVN,YAAa,EAAKI,MAAML,aACxBA,aAAc,GACdM,SAAUtB,IAEsB,KAA5B,EAAKqB,MAAML,cAAmD,MAA5B,EAAKK,MAAML,cAAkC,MAAThB,EAK3C,KAA5B,EAAKqB,MAAML,cAAgC,MAAThB,EACzC,EAAKuB,SAAS,CACVP,aAAchB,KAGlB,EAAKuB,SAAS,CACVN,YAAa,EAAKI,MAAML,aACxBA,aAAc,GACdM,SAAUtB,IAEd,EAAKyB,aAdL,EAAKF,SAAS,CACVP,aAAc,GACdM,SAAUtB,K,EAgBtByB,UAAY,WACR,IAAIC,EACJ,OAAQ,EAAKL,MAAMC,UACf,IAAK,IACDI,EAASC,WAAW,EAAKN,MAAMJ,aAAeU,WAAW,EAAKN,MAAML,cACpE,MACJ,IAAK,IACDU,EAASC,WAAW,EAAKN,MAAMJ,aAAeU,WAAW,EAAKN,MAAML,cACpE,MACJ,IAAK,IACDU,EAASC,WAAW,EAAKN,MAAMJ,aAAeU,WAAW,EAAKN,MAAML,cACpE,MACJ,IAAK,IACDU,EAASC,WAAW,EAAKN,MAAMJ,aAAeU,WAAW,EAAKN,MAAML,cAK5E,EAAKO,SAAS,CACVN,YAAaS,EAAOE,WACpBZ,aAAc,M,wEAIZ,IAAD,OACL,OACI,yBAAKa,UAAU,wBACX,kBAAC,EAAD,CAASb,aAAcX,KAAKgB,MAAML,aAAcC,YAAaZ,KAAKgB,MAAMJ,cACxE,yBAAKY,UAAU,qBACVV,EAAKW,KAAI,SAAAC,GAAM,OACZ,kBAAC,EAAD,CACI3B,GAAI2B,EAAO3B,GACX4B,IAAKD,EAAO/B,KACZA,KAAM+B,EAAO/B,KACbC,gBAAiB,EAAKA,gBACtBC,YAAa,EAAKA,YAClBC,YAAa,EAAKA,uB,GAlGrBK,IAAMC,W,MCIhBwB,MARf,WACE,OACE,yBAAKJ,UAAU,OACb,kBAAC,EAAD,QCKcK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.94f162e2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst buttonStyle = {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n}\r\n\r\nclass Buttons extends React.Component {\r\n\r\n    handleClick = () => {\r\n        switch(this.props.name) {\r\n            case \"0\":\r\n            case \"1\":\r\n            case \"2\":\r\n            case \"3\":\r\n            case \"4\":\r\n            case \"5\":\r\n            case \"6\":\r\n            case \"7\":\r\n            case \"8\":\r\n            case \"9\":\r\n            case \".\":\r\n                this.props.setSecondNumber(this.props.name);\r\n                break;\r\n            case \"+\":\r\n            case \"-\":\r\n            case \"x\":\r\n            case \"/\":\r\n            case \"=\":\r\n                this.props.setOperator(this.props.name);\r\n                break;\r\n            case \"Clear\":\r\n                this.props.clearResult();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <button\r\n                id={this.props.id}\r\n                style={buttonStyle}\r\n                onClick={this.handleClick}\r\n                >\r\n                    <h2>{this.props.name}</h2>\r\n            </button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Buttons;","import React from 'react';\r\n\r\nconst displayStyle = {\r\n    background: \"#6E8FD0\",\r\n    color: \"white\",\r\n    textAlign: \"right\",\r\n    paddingRight: 20\r\n}\r\n\r\nclass Display extends React.Component {\r\n    render () {\r\n        return (\r\n            <div id=\"display\" style={displayStyle}>\r\n                <h2>{this.props.secondNumber !== '' ? this.props.secondNumber : this.props.firstNumber}</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Display;","const buttonData = [\r\n    {id: \"clear\", name: \"Clear\"},\r\n    {id: \"seven\", name: \"7\"},\r\n    {id: \"eight\", name: \"8\"},\r\n    {id: \"nine\", name: \"9\"},\r\n    {id: \"add\", name: \"+\"},\r\n    {id: \"four\", name: \"4\"},\r\n    {id: \"five\", name: \"5\"},\r\n    {id: \"six\", name: \"6\"},\r\n    {id: \"subtract\", name: \"-\"},\r\n    {id: \"one\", name: \"1\"},\r\n    {id: \"two\", name: \"2\"},\r\n    {id: \"three\", name: \"3\"},\r\n    {id: \"multiply\", name: \"x\"},\r\n    {id: \"zero\", name: \"0\"},\r\n    {id: \"decimal\", name: \".\"},\r\n    {id: \"equals\", name: \"=\"},\r\n    {id: \"divide\", name: \"/\"},\r\n]\r\n\r\nexport default buttonData;","import React from 'react';\r\nimport Buttons from './Buttons';\r\nimport Display from './Display';\r\nimport buttonData from './buttonData'\r\nimport './Calculator.css'\r\n\r\nlet data = buttonData;\r\n\r\nclass Calculator extends React.Component {\r\n    state = {\r\n        firstNumber: '',\r\n        secondNumber: '0',\r\n        operator: '',\r\n    }\r\n\r\n    clearResult = () => {\r\n        this.setState({\r\n            firstNumber: '',\r\n            secondNumber: '0',\r\n            operator: '',\r\n        })\r\n    }\r\n\r\n    setSecondNumber = (name) => {\r\n        if (this.state.secondNumber === '0' && name === '.'){\r\n            this.setState({\r\n                secondNumber: this.state.secondNumber + name\r\n            })\r\n        } else if (this.state.secondNumber === '0' && name !== '.') {\r\n            this.setState({\r\n                firstNumber: this.state.secondNumber,\r\n                secondNumber: name\r\n            })\r\n        } else if (name === '.' && this.state.secondNumber.includes('.')) {\r\n            this.setState({\r\n                secondNumber: this.state.secondNumber\r\n            })\r\n        } else {\r\n            this.setState({\r\n                secondNumber: this.state.secondNumber + name\r\n            })\r\n        }\r\n    }\r\n    \r\n    setOperator = (name) => {\r\n        if (this.state.operator === ''){\r\n            this.setState({\r\n                firstNumber: this.state.secondNumber,\r\n                secondNumber: '',\r\n                operator: name\r\n            })\r\n        } else if ((this.state.secondNumber === '' || this.state.secondNumber === '-') && name !== '-') {\r\n            this.setState({\r\n                secondNumber: '',\r\n                operator: name\r\n            })\r\n        } else if (this.state.secondNumber === '' && name === '-') {\r\n            this.setState({\r\n                secondNumber: name\r\n            })\r\n        } else {\r\n            this.setState({\r\n                firstNumber: this.state.secondNumber,\r\n                secondNumber: '',\r\n                operator: name     \r\n            })\r\n            this.calculate();\r\n        }\r\n    }\r\n\r\n    calculate = () => {\r\n        let result;\r\n        switch (this.state.operator) {\r\n            case \"+\":\r\n                result = parseFloat(this.state.firstNumber) + parseFloat(this.state.secondNumber);\r\n                break;\r\n            case \"-\":\r\n                result = parseFloat(this.state.firstNumber) - parseFloat(this.state.secondNumber);\r\n                break;\r\n            case \"x\":\r\n                result = parseFloat(this.state.firstNumber) * parseFloat(this.state.secondNumber);\r\n                break;\r\n            case \"/\":\r\n                result = parseFloat(this.state.firstNumber) / parseFloat(this.state.secondNumber);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.setState({\r\n            firstNumber: result.toString(),\r\n            secondNumber: '',\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"calculator-container\">\r\n                <Display secondNumber={this.state.secondNumber} firstNumber={this.state.firstNumber}/>\r\n                <div className=\"buttons-container\">\r\n                    {data.map(button => (\r\n                        <Buttons \r\n                            id={button.id}\r\n                            key={button.name}\r\n                            name={button.name}\r\n                            setSecondNumber={this.setSecondNumber}\r\n                            setOperator={this.setOperator}\r\n                            clearResult={this.clearResult}\r\n                        />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Calculator;","import React from 'react';\nimport Calculator from './component/Calculator';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}